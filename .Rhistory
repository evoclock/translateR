if(nchar(sequence)%%3 !=0){
warning("DNA sequence isn't a multiple of 3. The function will assume that the first base
is in position one")
}
table <- matrix(c("UUU", "UUC","UUA","UUG","UCU","UCC","UCA","UCG","UAU",
"UAC","UAA","UAG","UGU","UGC","UGA","UGG","CUU","CUC",
"CUA","CUG","CCU","CCC","CCA","CCG","CAU","CAC","CAA",
"CAG","CGU","CGC","CGA","CGG","AUU","AUC","AUA","AUG",
"ACU","ACC","ACA","ACG","AAU","AAC","AAA","AAG","AGU",
"AGC","AGA","AGG","GUU","GUC","GUA","GUG","GCU","GCC",
"GCA","GCG","GAU","GAC","GAA","GAG","GGU","GGC", "GGA",
"GGG",
"F", "F", "L", "L", "S", "S", "S", "S", "Y", "Y",
"*", "*", "C", "C", "W", "W", "L", "L", "L", "L", "P", "P",
"P", "P", "H", "H", "Q", "Q", "R", "R", "R", "R", "I", "I",
"M", "M", "T", "T", "T", "T", "N", "N", "K", "K", "S", "S",
"*", "*", "V", "V", "V", "V", "A", "A", "A", "A", "D", "D",
"E", "E", "G", "G", "G", "G"), 64, 2)
dna <- toupper(sequence)
dna <- gsub("U", "T", dna)
codons <- list()
num.codons <- nchar(dna)/3
starts <- seq(from=1, by=3, length.out = num.codons)
for(i in 1:num.codons){
codons[i] <- substring(dna, starts[i], starts[i]+2)
}
result <- c()
for(i in 1:length(codons)){
result[[i]] <- table[table[,1] == dna[i], 2]
if(!dna[i] %in% table[,1]){
result[[i]] <- '-'
}
return(paste(unlist(result), sep="", collapse= " "))
}
sequence <- "ATGACCCTAGAGGGCGCATTGGAT"
library(TranslateR)
translate(sequence)
sequence <- "ATGACCCTAGAGGGCGCATTGGAT"
library(TranslateR)
library(devtools)
install.packages('github/evoclock')
install_github('github/evoclock')
install_github('github/evoclock')
install_github("github/evoclock")
translate <- function(sequence) {
if(nchar(sequence)%%3 !=0){
warning("DNA sequence isn't a multiple of 3. The function will assume that the first base
is in position one")
}
table <- matrix(c("UUU", "UUC","UUA","UUG","UCU","UCC","UCA","UCG","UAU",
"UAC","UAA","UAG","UGU","UGC","UGA","UGG","CUU","CUC",
"CUA","CUG","CCU","CCC","CCA","CCG","CAU","CAC","CAA",
"CAG","CGU","CGC","CGA","CGG","AUU","AUC","AUA","AUG",
"ACU","ACC","ACA","ACG","AAU","AAC","AAA","AAG","AGU",
"AGC","AGA","AGG","GUU","GUC","GUA","GUG","GCU","GCC",
"GCA","GCG","GAU","GAC","GAA","GAG","GGU","GGC", "GGA",
"GGG",
"F", "F", "L", "L", "S", "S", "S", "S", "Y", "Y",
"*", "*", "C", "C", "W", "W", "L", "L", "L", "L", "P", "P",
"P", "P", "H", "H", "Q", "Q", "R", "R", "R", "R", "I", "I",
"M", "M", "T", "T", "T", "T", "N", "N", "K", "K", "S", "S",
"*", "*", "V", "V", "V", "V", "A", "A", "A", "A", "D", "D",
"E", "E", "G", "G", "G", "G"), 64, 2)
dna <- toupper(sequence)
dna <- gsub("U", "T", dna)
codons <- list()
num.codons <- nchar(dna)/3
starts <- seq(from=1, by=3, length.out = num.codons)
for(i in 1:num.codons){
codons[i] <- substring(dna, starts[i], starts[i]+2)
}
result <- c()
for(i in 1:length(codons)){
result[i] <- table[table[,1] == codons[[i]], 2]
}
return(paste(unlist(result), sep="", collapse= ""))
}
translate(sequence)
library(devtools)
document()
setwd("~/Documents/GitHub/translateR")
document()
check()
document()
check()
document()
check()
sequence <- "ATGACCCTAGAGGGCGCATTGGAT"
library(TranslateR)
translate(sequence)
Translate(sequence)
library(devtools)
install_github('github/evoclock')
install_github("evoclock/TranslateR")
Translate(sequence)
library(TranslateR)
Translate(sequence)
library(TranslateR)
install_github("evoclock/translateR")
library(translateR)
library(TranslateR)
remove.packages("TranslateR")
library(translateR)
install_github('evoclock/translateR')
library(translateR)
Translate(sequence)
Translate <- function(sequence) {
if(nchar(sequence)%%3 !=0){
warning("DNA sequence isn't a multiple of 3. The function will assume that the first base
is in position one")
}
table <- matrix(c("UUU", "UUC","UUA","UUG","UCU","UCC","UCA","UCG","UAU",
"UAC","UAA","UAG","UGU","UGC","UGA","UGG","CUU","CUC",
"CUA","CUG","CCU","CCC","CCA","CCG","CAU","CAC","CAA",
"CAG","CGU","CGC","CGA","CGG","AUU","AUC","AUA","AUG",
"ACU","ACC","ACA","ACG","AAU","AAC","AAA","AAG","AGU",
"AGC","AGA","AGG","GUU","GUC","GUA","GUG","GCU","GCC",
"GCA","GCG","GAU","GAC","GAA","GAG","GGU","GGC", "GGA",
"GGG",
"F", "F", "L", "L", "S", "S", "S", "S", "Y", "Y",
"*", "*", "C", "C", "W", "W", "L", "L", "L", "L", "P", "P",
"P", "P", "H", "H", "Q", "Q", "R", "R", "R", "R", "I", "I",
"M", "M", "T", "T", "T", "T", "N", "N", "K", "K", "S", "S",
"*", "*", "V", "V", "V", "V", "A", "A", "A", "A", "D", "D",
"E", "E", "G", "G", "G", "G"), 64, 2)
dna <- toupper(sequence)
dna <- gsub("U", "T", dna)
codons <- list()
num.codons <- nchar(dna)/3
starts <- seq(from=1, by=3, length.out = num.codons)
for(i in 1:num.codons){
codons[i] <- substring(dna, starts[i], starts[i]+2)
}
result <- c()
for(i in 1:length(codons)){
result[i] <- table[table[,1] == codons[[i]], 2]
}
return(paste(unlist(result), sep="", collapse=""))
}
Translate(sequence)
sequence <- "ATGACCCTAGAGGGCGCATTGGATGGC"
library(translateR)
library(TranslateR)
Translate(sequence)
View(Translate)
install.packages(c("car", "DescTools", "hms", "mgcv", "openxlsx", "prodlim", "R.oo", "survival", "testthat", "tinytex"))
library(TranslateR)
Y
sequence <- "ATGACCCTAGAGGGCGCATTGGATGGC"
library(TranslateR)
Translate(sequence)
table <- matrix(c("UUU", "UUC","UUA","UUG","UCU","UCC","UCA","UCG","UAU",
"UAC","UAA","UAG","UGU","UGC","UGA","UGG","CUU","CUC",
"CUA","CUG","CCU","CCC","CCA","CCG","CAU","CAC","CAA",
"CAG","CGU","CGC","CGA","CGG","AUU","AUC","AUA","AUG",
"ACU","ACC","ACA","ACG","AAU","AAC","AAA","AAG","AGU",
"AGC","AGA","AGG","GUU","GUC","GUA","GUG","GCU","GCC",
"GCA","GCG","GAU","GAC","GAA","GAG","GGU","GGC", "GGA",
"GGG",
"F", "F", "L", "L", "S", "S", "S", "S", "Y", "Y",
"*", "*", "C", "C", "W", "W", "L", "L", "L", "L", "P", "P",
"P", "P", "H", "H", "Q", "Q", "R", "R", "R", "R", "I", "I",
"M", "M", "T", "T", "T", "T", "N", "N", "K", "K", "S", "S",
"*", "*", "V", "V", "V", "V", "A", "A", "A", "A", "D", "D",
"E", "E", "G", "G", "G", "G"), 64, 2)
#'Translate any DNA or RNA sequence to IUPAC amino acid code
#'
#'@param sequence a text string containg a DNA or RNA sequence
#'@return A text string that represents the translated amino acid sequence
#'@examples
#'sequence <- "ATGCTGTAG"
#'Translate(sequence)
#'@export
Translate <- function(sequence){
if(nchar(sequence)%%3 !=0){
warning("DNA sequence isn't a multiple of 3. The function will assume that the first base
is in position one")
}
table <- matrix(c("UUU", "UUC","UUA","UUG","UCU","UCC","UCA","UCG","UAU",
"UAC","UAA","UAG","UGU","UGC","UGA","UGG","CUU","CUC",
"CUA","CUG","CCU","CCC","CCA","CCG","CAU","CAC","CAA",
"CAG","CGU","CGC","CGA","CGG","AUU","AUC","AUA","AUG",
"ACU","ACC","ACA","ACG","AAU","AAC","AAA","AAG","AGU",
"AGC","AGA","AGG","GUU","GUC","GUA","GUG","GCU","GCC",
"GCA","GCG","GAU","GAC","GAA","GAG","GGU","GGC", "GGA",
"GGG",
"F", "F", "L", "L", "S", "S", "S", "S", "Y", "Y",
"*", "*", "C", "C", "W", "W", "L", "L", "L", "L", "P", "P",
"P", "P", "H", "H", "Q", "Q", "R", "R", "R", "R", "I", "I",
"M", "M", "T", "T", "T", "T", "N", "N", "K", "K", "S", "S",
"*", "*", "V", "V", "V", "V", "A", "A", "A", "A", "D", "D",
"E", "E", "G", "G", "G", "G"), 64, 2)
dna <- toupper(sequence)
dna <- gsub("U", "T", dna)
codons <- list()
num.codons <- nchar(dna)/3
starts <- seq(from=1, by=3, length.out = num.codons)
for(i in 1:num.codons){
codons[i] <- substring(dna, starts[i], starts[i]+2)
}
result <- c()
for(i in 1:length(codons)){
result[i] <- table[table[,1] == codons[[i]] , 2]
}
return(paste(unlist(result), sep="", collapse=""))
}
Translate(sequence)
result <- c()
for(i in 1:length(codons)){
result[i] <- table[table[,1] == codons[[i]] , 2]
}
View(table)
dna <- toupper(sequence)
dna <- gsub("U", "T", dna)
codons <- list()
num.codons <- nchar(dna)/3
starts <- seq(from=1, by=3, length.out = num.codons)
for(i in 1:num.codons){
codons[i] <- substring(dna, starts[i], starts[i]+2)
}
View(codons)
result <- c()
for(i in 1:length(codons)){
result[i] <- table[table[,1] == codons[[i]] , 2]
}
result <- c()
for(i in 1:length(codons)){
result[i] <- table[table[,1] == codons[[i]] , 2]
result <- c()
}
return(paste(unlist(result), sep="", collapse=""))
result <- c()
for(i in 1:length(codons)){
result[i] <- table[table[,1] == codons[[i]] , 2]
}
sequence <- "ATGACCCTAGAGGGCGCATTGGAT"
library(TranslateR)
Translate(sequence)
sequence <- "ATGCTGTAG"
Translate(sequence)
Translate(sequence)
table <- matrix(c("UUU", "UUC","UUA","UUG","UCU","UCC","UCA","UCG","UAU",
"UAC","UAA","UAG","UGU","UGC","UGA","UGG","CUU","CUC",
"CUA","CUG","CCU","CCC","CCA","CCG","CAU","CAC","CAA",
"CAG","CGU","CGC","CGA","CGG","AUU","AUC","AUA","AUG",
"ACU","ACC","ACA","ACG","AAU","AAC","AAA","AAG","AGU",
"AGC","AGA","AGG","GUU","GUC","GUA","GUG","GCU","GCC",
"GCA","GCG","GAU","GAC","GAA","GAG","GGU","GGC", "GGA",
"GGG",
"F", "F", "L", "L", "S", "S", "S", "S", "Y", "Y",
"*", "*", "C", "C", "W", "W", "L", "L", "L", "L", "P", "P",
"P", "P", "H", "H", "Q", "Q", "R", "R", "R", "R", "I", "I",
"M", "M", "T", "T", "T", "T", "N", "N", "K", "K", "S", "S",
"*", "*", "V", "V", "V", "V", "A", "A", "A", "A", "D", "D",
"E", "E", "G", "G", "G", "G"), 64, 2)
dna <- toupper(sequence)
dna <- gsub("U", "T", dna)
codons <- list()
num.codons <- nchar(dna)/3
starts <- seq(from=1, by=3, length.out = num.codons)
for(i in 1:num.codons){
codons[i] <- substring(dna, starts[i], starts[i]+2)
}
result <- c()
for(i in 1:length(codons)){
result[i] <- table[table[,1] == codons[[i]] , 2]
}
return(paste(unlist(result), sep="", collapse=""))
return(paste(unlist(result), sep="", collapse=""))
library(devtools)
document()
#'Translate any DNA or RNA sequence to IUPAC amino acid code
#'
#'@param sequence a text string containg a DNA or RNA sequence
#'@return A text string that represents the translated amino acid sequence
#'@examples
#'sequence <- "ATGCTGTAG"
#'Translate(sequence)
#'@export
Translate <- function(sequence){
if(nchar(sequence)%%3 !=0){
warning("DNA sequence isn't a multiple of 3. The function will assume that the first base
is in position one")
}
table <- matrix(c("UUU", "UUC","UUA","UUG","UCU","UCC","UCA","UCG","UAU",
"UAC","UAA","UAG","UGU","UGC","UGA","UGG","CUU","CUC",
"CUA","CUG","CCU","CCC","CCA","CCG","CAU","CAC","CAA",
"CAG","CGU","CGC","CGA","CGG","AUU","AUC","AUA","AUG",
"ACU","ACC","ACA","ACG","AAU","AAC","AAA","AAG","AGU",
"AGC","AGA","AGG","GUU","GUC","GUA","GUG","GCU","GCC",
"GCA","GCG","GAU","GAC","GAA","GAG","GGU","GGC", "GGA",
"GGG",
"F", "F", "L", "L", "S", "S", "S", "S", "Y", "Y",
"*", "*", "C", "C", "W", "W", "L", "L", "L", "L", "P", "P",
"P", "P", "H", "H", "Q", "Q", "R", "R", "R", "R", "I", "I",
"M", "M", "T", "T", "T", "T", "N", "N", "K", "K", "S", "S",
"*", "*", "V", "V", "V", "V", "A", "A", "A", "A", "D", "D",
"E", "E", "G", "G", "G", "G"), 64, 2)
dna <- toupper(sequence)
dna <- gsub("U", "T", dna)
codons <- list()
num.codons <- nchar(dna)/3
starts <- seq(from=1, by=3, length.out = num.codons)
for(i in 1:num.codons){
codons[i] <- substring(dna, starts[i], starts[i]+2)
}
result <- c()
for(i in 1:length(codons)){
result[i] <- table[table[,1] == codons[[i]] , 2]
}
return(paste(unlist(result), sep="", collapse=""))
}
Translate(sequence)
document()
#'Translate any DNA or RNA sequence to IUPAC amino acid code
#'
#'@param sequence a text string containg a DNA or RNA sequence
#'@return A text string that represents the translated amino acid sequence
#'@examples
#'sequence <- "ATGCTGTAG"
#'Translate(sequence)
#'@export
Translate <- function(sequence){
if(nchar(sequence)%%3 !=0){
warning("DNA sequence isn't a multiple of 3. The function will assume that the first base
is in position one")
}
table <- matrix(c("UUU", "UUC","UUA","UUG","UCU","UCC","UCA","UCG","UAU",
"UAC","UAA","UAG","UGU","UGC","UGA","UGG","CUU","CUC",
"CUA","CUG","CCU","CCC","CCA","CCG","CAU","CAC","CAA",
"CAG","CGU","CGC","CGA","CGG","AUU","AUC","AUA","AUG",
"ACU","ACC","ACA","ACG","AAU","AAC","AAA","AAG","AGU",
"AGC","AGA","AGG","GUU","GUC","GUA","GUG","GCU","GCC",
"GCA","GCG","GAU","GAC","GAA","GAG","GGU","GGC", "GGA",
"GGG",
"F", "F", "L", "L", "S", "S", "S", "S", "Y", "Y",
"*", "*", "C", "C", "W", "W", "L", "L", "L", "L", "P", "P",
"P", "P", "H", "H", "Q", "Q", "R", "R", "R", "R", "I", "I",
"M", "M", "T", "T", "T", "T", "N", "N", "K", "K", "S", "S",
"*", "*", "V", "V", "V", "V", "A", "A", "A", "A", "D", "D",
"E", "E", "G", "G", "G", "G"), 64, 2)
dna <- toupper(sequence)
dna <- gsub("U", "T", dna)
codons <- list()
num.codons <- nchar(dna)/3
starts <- seq(from=1, by=3, length.out = num.codons)
for(i in 1:num.codons){
codons[i] <- substring(dna, starts[i], starts[i]+2)
}
result <- c()
for(i in 1:length(codons)){
result[i] <- table[table[,1] == codons[[i]] , 2]
}
return(paste(unlist(result), sep="", collapse=""))
}
document()
check()
library(TranslateR)
sequence <- "ATGCTGTAG"
Translate(sequence)
sequence <- "ATGACCCTAGAGGGCGCATTGGAT"
Translate(sequence)
sequence <- "ATGCTGTAGgtcATCGCC"
Translate(sequence)
sequence <- "ATGtacacagctaaagaacggauuuctacacatgaaggtagagaggccacagagagcacguag"
Translate(sequence)
dna <- toupper(sequence)
dna <- gsub("U", "T", dna)
codons <- list()
num.codons <- nchar(dna)/3
starts <- seq(from=1, by=3, length.out = num.codons)
for(i in 1:num.codons){
codons[i] <- substring(dna, starts[i], starts[i]+2)
}
result <- c()
for(i in 1:length(codons)){
result[i] <- table[table[,1] == codons[[i]] , 2]
}
return(paste(unlist(result), sep="", collapse=""))
table <- matrix(c("UUU", "UUC","UUA","UUG","UCU","UCC","UCA","UCG","UAU",
"UAC","UAA","UAG","UGU","UGC","UGA","UGG","CUU","CUC",
"CUA","CUG","CCU","CCC","CCA","CCG","CAU","CAC","CAA",
"CAG","CGU","CGC","CGA","CGG","AUU","AUC","AUA","AUG",
"ACU","ACC","ACA","ACG","AAU","AAC","AAA","AAG","AGU",
"AGC","AGA","AGG","GUU","GUC","GUA","GUG","GCU","GCC",
"GCA","GCG","GAU","GAC","GAA","GAG","GGU","GGC", "GGA",
"GGG",
"F", "F", "L", "L", "S", "S", "S", "S", "Y", "Y",
"*", "*", "C", "C", "W", "W", "L", "L", "L", "L", "P", "P",
"P", "P", "H", "H", "Q", "Q", "R", "R", "R", "R", "I", "I",
"M", "M", "T", "T", "T", "T", "N", "N", "K", "K", "S", "S",
"*", "*", "V", "V", "V", "V", "A", "A", "A", "A", "D", "D",
"E", "E", "G", "G", "G", "G"), 64, 2)
dna <- toupper(sequence)
dna <- gsub("U", "T", dna)
codons <- list()
num.codons <- nchar(dna)/3
starts <- seq(from=1, by=3, length.out = num.codons)
for(i in 1:num.codons){
codons[i] <- substring(dna, starts[i], starts[i]+2)
}
result <- c()
for(i in 1:length(codons)){
result[i] <- table[table[,1] == codons[[i]] , 2]
}
return(paste(unlist(result), sep="", collapse=""))
Translate(sequence)
translate(sequence)
Translate(sequence)
sequence <- "ATGtacacagctaaagaacggauuuctacacatgaagg"
Translate(sequence)
sequence <- "ATGtacacagctaaagaacggauuuctacacatgaag"
Translate(sequence)
sequence <- "ATGtacacagctaaagaacggauuuctacacatgaa"
Translate(sequence)
sequence <- "ATGtacacagctaaagaacggauuuctacacatga"
Translate(sequence)
sequence <- "ATGtacacagctaaagaacggauuuctacacatg"
Translate(sequence)
sequence <- "ATGtacacagctaaagaacggauuuctacacat"
Translate(sequence)
sequence <- "ATGtacacagctaaagaacggauuuctacact"
Translate(sequence)
sequence <- "ATGtacacagctaaagaacggauuuctcact"
Translate(sequence)
sequence <- "ATGtacacagctaaagaacggauuuctact"
Translate(sequence)
sequence <- "ATGtacacagctaaagaacggauuuctact"
Translate(sequence)
sequence <- "ATGtacacagctaaagaacggauuctact"
Translate(sequence)
sequence <- "ATGtacacagctaaagaacggauctact"
Translate(sequence)
sequence <- "ATGtacacagctaaagaacggauctact"
Translate(sequence)
sequence <- "ATGtacacagctaaagaacggauctactac"
Translate(sequence)
sequence <- "ATGtacacagctaaagaacggauctactacg"
Translate(sequence)
library(TranslateR)
sequence <- "ATGtacacagctaaagaacggauctactacg"
Translate(sequence)
sequence <- "ATGtacacagctaaagaacggauctactacg"
Translate(sequence)
Translate(sequence)
sequence <- "ATGtacacaggcttaaagaacggauctactacg"
Translate(sequence)
sequence <- "ATGtacacaggcttaaaagaacggauctactacg"
Translate(sequence)
library(TranslateR)
sequence <- "ATGtacacagctaaaGAacggauuuctacacatGAAGgtagagaggccacagagagcacguag"
Translate(sequence)
library(TranslateR)
remove.packages("TranslateR")
library(devtools)
install_github('coleoguy/tRanslate')
library(tRanslate)
Translate(sequence)
library(devtools)
document()
check()
install_github('evoclock/TranslateR')
library(TranslateR)
Tslate(sequence)
#'Translate any DNA or RNA sequence to IUPAC amino acid code
#'
#'@param sequence a text string containg a DNA or RNA sequence
#'@return A text string that represents the translated amino acid sequence
#'@examples
#'sequence <- "ATGCTGTAG"
#'Tslate(sequence)
#'@export
Tslate <- function(sequence){
if(nchar(sequence)%%3 !=0){
warning("DNA sequence isn't a multiple of 3. The function will assume that the first base
is in position one")
}
table <- matrix(c("UUU", "UUC","UUA","UUG","UCU","UCC","UCA","UCG","UAU",
"UAC","UAA","UAG","UGU","UGC","UGA","UGG","CUU","CUC",
"CUA","CUG","CCU","CCC","CCA","CCG","CAU","CAC","CAA",
"CAG","CGU","CGC","CGA","CGG","AUU","AUC","AUA","AUG",
"ACU","ACC","ACA","ACG","AAU","AAC","AAA","AAG","AGU",
"AGC","AGA","AGG","GUU","GUC","GUA","GUG","GCU","GCC",
"GCA","GCG","GAU","GAC","GAA","GAG","GGU","GGC", "GGA",
"GGG", "F", "F", "L", "L", "S", "S", "S", "S", "Y", "Y",
"*", "*", "C", "C", "W", "W", "L", "L", "L", "L", "P", "P",
"P", "P", "H", "H", "Q", "Q", "R", "R", "R", "R", "I", "I",
"M", "M", "T", "T", "T", "T", "N", "N", "K", "K", "S", "S",
"*", "*", "V", "V", "V", "V", "A", "A", "A", "A", "D", "D",
"E", "E", "G", "G", "G", "G"), 64, 2)
dna <- toupper(sequence)
dna <- gsub("U", "T", dna)
codons <- list()
num.codons <- nchar(dna)/3
starts <- seq(from=1, by=3, length.out = num.codons)
for(i in 1:num.codons){
codons[i] <- substring(dna, starts[i], starts[i]+2)
}
result <- c()
for(i in 1:length(codons)){
result[i] <- table[table[,1] == codons[[i]] , 2]
}
return(paste(unlist(result), sep="", collapse=""))
}
Tslate(sequence)
library(tRanslate)
Translate(sequence)
library(TranslateR)
detach("package:tRanslate", unload = TRUE)
library(TranslateR)
document()
check()
