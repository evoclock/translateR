# the discrete trait is the response)
data.frame(exp.trait, row.names = names(exp.trait))
# anova on phylo. using a variance/covariance matrix (or simulate regular anova 1000 times to generate
#F statistic 1000 times to compare against the continuous trait, the continuous trait is the predictor
# the discrete trait is the response)
foo <- as.matrix(data.frame(exp.trait, row.names = names(exp.trait)))
pred <- as.factor(sus.trait)
# anova on phylo. using a variance/covariance matrix (or simulate regular anova 1000 times to generate
#F statistic 1000 times to compare against the continuous trait, the continuous trait is the predictor
# the discrete trait is the response)
resp <- as.matrix(data.frame(exp.trait, row.names = names(exp.trait)))
pred <- as.factor(sus.trait)
fit <- aov.phylo(pred~resp, tree, nsim=1000)
# anova on phylo. using a variance/covariance matrix (or simulate regular anova 1000 times to generate
#F statistic 1000 times to compare against the continuous trait, the continuous trait is the predictor
# the discrete trait is the response)
resp <- as.matrix(data.frame(exp.trait, row.names = names(exp.trait)))
pred <- as.factor(sus.trait)
fit <- aov.phylo(pred~resp, tree, nsim=1000)
# anova on phylo. using a variance/covariance matrix (or simulate regular anova 1000 times to generate
#F statistic 1000 times to compare against the continuous trait, the continuous trait is the predictor
# the discrete trait is the response)
resp <- matrix(exp.trait, 50, 1)
# anova on phylo. using a variance/covariance matrix (or simulate regular anova 1000 times to generate
#F statistic 1000 times to compare against the continuous trait, the continuous trait is the predictor
# the discrete trait is the response)
resp <- matrix(exp.trait, 50, 1)
row.names(resp) <- names(exp.trait)
pred <- as.factor(sus.trait)
fit <- aov.phylo(resp~pred, tree, nsim=1000)
library(devtools)
install.github('evoclock/translateR')
library(devtools)
install_github('evoclock/translateR')
sequence <- "ATGACCCTAGAGGGCGCATTGG"
library(TranslateR)
translate(sequence)
sequence <- "ATGACCCTAGAGGGCGCATTGGA"
library(TranslateR)
translate(sequence)
sequence <- "ATGACCCTAGAGGGCGCATTGGAT"
library(TranslateR)
translate(sequence)
table <- matrix(c("UUU", "UUC","UUA","UUG","UCU","UCC","UCA","UCG","UAU",
"UAC","UAA","UAG","UGU","UGC","UGA","UGG","CUU","CUC",
"CUA","CUG","CCU","CCC","CCA","CCG","CAU","CAC","CAA",
"CAG","CGU","CGC","CGA","CGG","AUU","AUC","AUA","AUG",
"ACU","ACC","ACA","ACG","AAU","AAC","AAA","AAG","AGU",
"AGC","AGA","AGG","GUU","GUC","GUA","GUG","GCU","GCC",
"GCA","GCG","GAU","GAC","GAA","GAG","GGU","GGC", "GGA",
"GGG",
"F", "F", "L", "L", "S", "S", "S", "S", "Y", "Y",
"*", "*", "C", "C", "W", "W", "L", "L", "L", "L", "P", "P",
"P", "P", "H", "H", "Q", "Q", "R", "R", "R", "R", "I", "I",
"M", "M", "T", "T", "T", "T", "N", "N", "K", "K", "S", "S",
"*", "*", "V", "V", "V", "V", "A", "A", "A", "A", "D", "D",
"E", "E", "G", "G", "G", "G"), 64, 2)
dna <- toupper(sequence)
dna <- gsub("U", "T", dna)
codons <- list()
num.codons <- nchar(dna)/3
starts <- seq(from=1, by=3, length.out = num.codons)
for(i in 1:num.codons){
codons[i] <- substring(dna, starts[i], starts[i]+2)
}
View(codons)
?which
codons[]
table
nuc <- which(table[,1])
nuc <- which(table[,1] == i)
sequence <- "ATGACCCTAGAGGGCGCATTGGAT"
library(TranslateR)
translate(sequence)
sequence <- "ATGACCCTAGAGGGCGCATTGGAT"
library(TranslateR)
translate(sequence)
library(TranslateR)
sequence <- "ATGACCCTAGAGGGCGCATTGGAT"
library(TranslateR)
translate(sequence)
translate <- function(sequence) {
warning(
"DNA sequence isn't a multiple of 3. The function will assume that the first base
is in position one"
)
if (nchar(sequence) %% 3 != 0) {
warning(
"DNA sequence isn't a multiple of 3. The function will assume that the first base
is in position one"
)
}
table <-
matrix(
c(
"UUU",
"UUC",
"UUA",
"UUG",
"UCU",
"UCC",
"UCA",
"UCG",
"UAU",
"UAC",
"UAA",
"UAG",
"UGU",
"UGC",
"UGA",
"UGG",
"CUU",
"CUC",
"CUA",
"CUG",
"CCU",
"CCC",
"CCA",
"CCG",
"CAU",
"CAC",
"CAA",
"CAG",
"CGU",
"CGC",
"CGA",
"CGG",
"AUU",
"AUC",
"AUA",
"AUG",
"ACU",
"ACC",
"ACA",
"ACG",
"AAU",
"AAC",
"AAA",
"AAG",
"AGU",
"AGC",
"AGA",
"AGG",
"GUU",
"GUC",
"GUA",
"GUG",
"GCU",
"GCC",
"GCA",
"GCG",
"GAU",
"GAC",
"GAA",
"GAG",
"GGU",
"GGC",
"GGA",
"GGG",
"F",
"F",
"L",
"L",
"S",
"S",
"S",
"S",
"Y",
"Y",
"*",
"*",
"C",
"C",
"W",
"W",
"L",
"L",
"L",
"L",
"P",
"P",
"P",
"P",
"H",
"H",
"Q",
"Q",
"R",
"R",
"R",
"R",
"I",
"I",
"M",
"M",
"T",
"T",
"T",
"T",
"N",
"N",
"K",
"K",
"S",
"S",
"*",
"*",
"V",
"V",
"V",
"V",
"A",
"A",
"A",
"A",
"D",
"D",
"E",
"E",
"G",
"G",
"G",
"G"
),
64,
2
)
dna <- toupper(sequence)
dna <- gsub("U", "T", dna)
codons <- list()
num.codons <- nchar(dna) / 3
starts <- seq(from = 1,
by = 3,
length.out = num.codons)
for (i in 1:num.codons) {
codons[i] <- substring(dna, starts[i], starts[i] + 2)
}
result <- c()
for (i in 1:length(codons)) {
result[[i]] <- table[table[, 1] == dna[i], 2]
if (!dna[i] %in% table[, 1]) {
result[[i]] <- '-'
}
return(paste(unlist(result), sep = "", collapse = " "))
}
sequence <- "ATGACCCTAGAGGGCGCATTGGAT"
library(TranslateR)
translate(sequence)
translate(sequence)
library(devtools)
document()
check()
library(devtools)
document(x)
document()
check()
translate(sequence)
translate <- function(sequence) {
if(nchar(sequence)%%3 !=0){
warning("DNA sequence isn't a multiple of 3. The function will assume that the first base
is in position one")
}
table <- matrix(c("UUU", "UUC","UUA","UUG","UCU","UCC","UCA","UCG","UAU",
"UAC","UAA","UAG","UGU","UGC","UGA","UGG","CUU","CUC",
"CUA","CUG","CCU","CCC","CCA","CCG","CAU","CAC","CAA",
"CAG","CGU","CGC","CGA","CGG","AUU","AUC","AUA","AUG",
"ACU","ACC","ACA","ACG","AAU","AAC","AAA","AAG","AGU",
"AGC","AGA","AGG","GUU","GUC","GUA","GUG","GCU","GCC",
"GCA","GCG","GAU","GAC","GAA","GAG","GGU","GGC", "GGA",
"GGG",
"F", "F", "L", "L", "S", "S", "S", "S", "Y", "Y",
"*", "*", "C", "C", "W", "W", "L", "L", "L", "L", "P", "P",
"P", "P", "H", "H", "Q", "Q", "R", "R", "R", "R", "I", "I",
"M", "M", "T", "T", "T", "T", "N", "N", "K", "K", "S", "S",
"*", "*", "V", "V", "V", "V", "A", "A", "A", "A", "D", "D",
"E", "E", "G", "G", "G", "G"), 64, 2)
dna <- toupper(sequence)
dna <- gsub("U", "T", dna)
codons <- list()
num.codons <- nchar(dna)/3
starts <- seq(from=1, by=3, length.out = num.codons)
for(i in 1:length(num.codons)){
codons[i] <- substring(dna, starts[i], starts[i]+2)
}
result <- c()
for(i in 1:length(codons)){
result[[i]] <- table[table[,1] == dna[i], 2]
if(!dna[i] %in% table[,1]){
result[[i]] <- '-'
}
return(paste(unlist(result), sep="", collapse= " "))
}
translate(sequence)
translate <- function(sequence) {
if(nchar(sequence)%%3 !=0){
warning("DNA sequence isn't a multiple of 3. The function will assume that the first base
is in position one")
}
table <- matrix(c("UUU", "UUC","UUA","UUG","UCU","UCC","UCA","UCG","UAU",
"UAC","UAA","UAG","UGU","UGC","UGA","UGG","CUU","CUC",
"CUA","CUG","CCU","CCC","CCA","CCG","CAU","CAC","CAA",
"CAG","CGU","CGC","CGA","CGG","AUU","AUC","AUA","AUG",
"ACU","ACC","ACA","ACG","AAU","AAC","AAA","AAG","AGU",
"AGC","AGA","AGG","GUU","GUC","GUA","GUG","GCU","GCC",
"GCA","GCG","GAU","GAC","GAA","GAG","GGU","GGC", "GGA",
"GGG",
"F", "F", "L", "L", "S", "S", "S", "S", "Y", "Y",
"*", "*", "C", "C", "W", "W", "L", "L", "L", "L", "P", "P",
"P", "P", "H", "H", "Q", "Q", "R", "R", "R", "R", "I", "I",
"M", "M", "T", "T", "T", "T", "N", "N", "K", "K", "S", "S",
"*", "*", "V", "V", "V", "V", "A", "A", "A", "A", "D", "D",
"E", "E", "G", "G", "G", "G"), 64, 2)
dna <- toupper(sequence)
dna <- gsub("U", "T", dna)
codons <- list()
num.codons <- nchar(dna)/3
starts <- seq(from=1, by=3, length.out = num.codons)
for(i in 1:num.codons){
codons[i] <- substring(dna, starts[i], starts[i]+2)
}
result <- c()
for(i in 1:length(codons)){
result[[i]] <- table[table[,1] == dna[i], 2]
if(!dna[i] %in% table[,1]){
result[[i]] <- '-'
}
return(paste(unlist(result), sep="", collapse= " "))
}
translate(sequence)
translate <- function(sequence) {
if(nchar(sequence)%%3 !=0){
warning("DNA sequence isn't a multiple of 3. The function will assume that the first base
is in position one")
}
table <- matrix(c("UUU", "UUC","UUA","UUG","UCU","UCC","UCA","UCG","UAU",
"UAC","UAA","UAG","UGU","UGC","UGA","UGG","CUU","CUC",
"CUA","CUG","CCU","CCC","CCA","CCG","CAU","CAC","CAA",
"CAG","CGU","CGC","CGA","CGG","AUU","AUC","AUA","AUG",
"ACU","ACC","ACA","ACG","AAU","AAC","AAA","AAG","AGU",
"AGC","AGA","AGG","GUU","GUC","GUA","GUG","GCU","GCC",
"GCA","GCG","GAU","GAC","GAA","GAG","GGU","GGC", "GGA",
"GGG",
"F", "F", "L", "L", "S", "S", "S", "S", "Y", "Y",
"*", "*", "C", "C", "W", "W", "L", "L", "L", "L", "P", "P",
"P", "P", "H", "H", "Q", "Q", "R", "R", "R", "R", "I", "I",
"M", "M", "T", "T", "T", "T", "N", "N", "K", "K", "S", "S",
"*", "*", "V", "V", "V", "V", "A", "A", "A", "A", "D", "D",
"E", "E", "G", "G", "G", "G"), 64, 2)
dna <- toupper(sequence)
dna <- gsub("U", "T", dna)
codons <- list()
num.codons <- nchar(dna)/3
starts <- seq(from=1, by=3, length.out = num.codons)
for(i in 1:num.codons){
codons[i] <- substring(dna, starts[i], starts[i]+2)
}
result <- c()
for(i in 1:length(codons)){
result[[i]] <- table[table[,1] == dna[i], 2]
if(!dna[i] %in% table[,1]){
result[[i]] <- '-'
}
return(paste(unlist(result), sep="", collapse= " "))
}
}
translate <- function(sequence) {
if(nchar(sequence)%%3 !=0){
warning("DNA sequence isn't a multiple of 3. The function will assume that the first base
is in position one")
}
table <- matrix(c("UUU", "UUC","UUA","UUG","UCU","UCC","UCA","UCG","UAU",
"UAC","UAA","UAG","UGU","UGC","UGA","UGG","CUU","CUC",
"CUA","CUG","CCU","CCC","CCA","CCG","CAU","CAC","CAA",
"CAG","CGU","CGC","CGA","CGG","AUU","AUC","AUA","AUG",
"ACU","ACC","ACA","ACG","AAU","AAC","AAA","AAG","AGU",
"AGC","AGA","AGG","GUU","GUC","GUA","GUG","GCU","GCC",
"GCA","GCG","GAU","GAC","GAA","GAG","GGU","GGC", "GGA",
"GGG",
"F", "F", "L", "L", "S", "S", "S", "S", "Y", "Y",
"*", "*", "C", "C", "W", "W", "L", "L", "L", "L", "P", "P",
"P", "P", "H", "H", "Q", "Q", "R", "R", "R", "R", "I", "I",
"M", "M", "T", "T", "T", "T", "N", "N", "K", "K", "S", "S",
"*", "*", "V", "V", "V", "V", "A", "A", "A", "A", "D", "D",
"E", "E", "G", "G", "G", "G"), 64, 2)
dna <- toupper(sequence)
dna <- gsub("U", "T", dna)
codons <- list()
num.codons <- nchar(dna)/3
starts <- seq(from=1, by=3, length.out = num.codons)
for(i in 1:num.codons){
codons[i] <- substring(dna, starts[i], starts[i]+2)
}
result <- c()
for(i in 1:length(codons)){
result[[i]] <- table[table[,1] == dna[i], 2]
if(!dna[i] %in% table[,1]){
result[[i]] <- '-'
}
return(paste(unlist(result), sep="", collapse= " "))
}
}
}
translate <- function(sequence) {
if(nchar(sequence)%%3 !=0){
warning("DNA sequence isn't a multiple of 3. The function will assume that the first base
is in position one")
}
table <- matrix(c("UUU", "UUC","UUA","UUG","UCU","UCC","UCA","UCG","UAU",
"UAC","UAA","UAG","UGU","UGC","UGA","UGG","CUU","CUC",
"CUA","CUG","CCU","CCC","CCA","CCG","CAU","CAC","CAA",
"CAG","CGU","CGC","CGA","CGG","AUU","AUC","AUA","AUG",
"ACU","ACC","ACA","ACG","AAU","AAC","AAA","AAG","AGU",
"AGC","AGA","AGG","GUU","GUC","GUA","GUG","GCU","GCC",
"GCA","GCG","GAU","GAC","GAA","GAG","GGU","GGC", "GGA",
"GGG",
"F", "F", "L", "L", "S", "S", "S", "S", "Y", "Y",
"*", "*", "C", "C", "W", "W", "L", "L", "L", "L", "P", "P",
"P", "P", "H", "H", "Q", "Q", "R", "R", "R", "R", "I", "I",
"M", "M", "T", "T", "T", "T", "N", "N", "K", "K", "S", "S",
"*", "*", "V", "V", "V", "V", "A", "A", "A", "A", "D", "D",
"E", "E", "G", "G", "G", "G"), 64, 2)
dna <- toupper(sequence)
dna <- gsub("U", "T", dna)
codons <- list()
num.codons <- nchar(dna)/3
starts <- seq(from=1, by=3, length.out = num.codons)
for(i in 1:num.codons){
codons[i] <- substring(dna, starts[i], starts[i]+2)
}
result <- c()
for(i in 1:length(codons)){
result[[i]] <- table[table[,1] == dna[i], 2]
if(!dna[i] %in% table[,1]){
result[[i]] <- '-'
}
return(paste(unlist(result), sep="", collapse= " "))
}
sequence <- "ATGACCCTAGAGGGCGCATTGGAT"
library(TranslateR)
translate(sequence)
sequence <- "ATGACCCTAGAGGGCGCATTGGAT"
library(TranslateR)
library(devtools)
install.packages('github/evoclock')
install_github('github/evoclock')
install_github('github/evoclock')
install_github("github/evoclock")
translate <- function(sequence) {
if(nchar(sequence)%%3 !=0){
warning("DNA sequence isn't a multiple of 3. The function will assume that the first base
is in position one")
}
table <- matrix(c("UUU", "UUC","UUA","UUG","UCU","UCC","UCA","UCG","UAU",
"UAC","UAA","UAG","UGU","UGC","UGA","UGG","CUU","CUC",
"CUA","CUG","CCU","CCC","CCA","CCG","CAU","CAC","CAA",
"CAG","CGU","CGC","CGA","CGG","AUU","AUC","AUA","AUG",
"ACU","ACC","ACA","ACG","AAU","AAC","AAA","AAG","AGU",
"AGC","AGA","AGG","GUU","GUC","GUA","GUG","GCU","GCC",
"GCA","GCG","GAU","GAC","GAA","GAG","GGU","GGC", "GGA",
"GGG",
"F", "F", "L", "L", "S", "S", "S", "S", "Y", "Y",
"*", "*", "C", "C", "W", "W", "L", "L", "L", "L", "P", "P",
"P", "P", "H", "H", "Q", "Q", "R", "R", "R", "R", "I", "I",
"M", "M", "T", "T", "T", "T", "N", "N", "K", "K", "S", "S",
"*", "*", "V", "V", "V", "V", "A", "A", "A", "A", "D", "D",
"E", "E", "G", "G", "G", "G"), 64, 2)
dna <- toupper(sequence)
dna <- gsub("U", "T", dna)
codons <- list()
num.codons <- nchar(dna)/3
starts <- seq(from=1, by=3, length.out = num.codons)
for(i in 1:num.codons){
codons[i] <- substring(dna, starts[i], starts[i]+2)
}
result <- c()
for(i in 1:length(codons)){
result[i] <- table[table[,1] == codons[[i]], 2]
}
return(paste(unlist(result), sep="", collapse= ""))
}
translate(sequence)
library(TranslateR)
library(tRanslate)
sequence <- "ATGCTGTAG"
Tslate(sequence)
table <- matrix(c("UUU", "UUC","UUA","UUG","UCU","UCC","UCA","UCG","UAU",
"UAC","UAA","UAG","UGU","UGC","UGA","UGG","CUU","CUC",
"CUA","CUG","CCU","CCC","CCA","CCG","CAU","CAC","CAA",
"CAG","CGU","CGC","CGA","CGG","AUU","AUC","AUA","AUG",
"ACU","ACC","ACA","ACG","AAU","AAC","AAA","AAG","AGU",
"AGC","AGA","AGG","GUU","GUC","GUA","GUG","GCU","GCC",
"GCA","GCG","GAU","GAC","GAA","GAG","GGU","GGC", "GGA",
"GGG", "F", "F", "L", "L", "S", "S", "S", "S", "Y", "Y",
"*", "*", "C", "C", "W", "W", "L", "L", "L", "L", "P", "P",
"P", "P", "H", "H", "Q", "Q", "R", "R", "R", "R", "I", "I",
"M", "M", "T", "T", "T", "T", "N", "N", "K", "K", "S", "S",
"*", "*", "V", "V", "V", "V", "A", "A", "A", "A", "D", "D",
"E", "E", "G", "G", "G", "G"), 64, 2)
View(table)
document()
library(devtools)
document
document()
document()
setwd("~/Documents/GitHub/translateR/R")
document()
check()
Tslate(sequence)
sequence <- ATGtacacagctaaaGAacggauuuctacacatGAAGgtagagaggccacagagagcacguag
sequence <- "ATGtacacagctaaaGAacggauuuctacacatGAAGgtagagaggccacagagagcacguag""
sequence <- "ATGtacacagctaaaGAacggauuuctacacatGAAGgtagagaggccacagagagcacguag"
Tslate(sequence)
